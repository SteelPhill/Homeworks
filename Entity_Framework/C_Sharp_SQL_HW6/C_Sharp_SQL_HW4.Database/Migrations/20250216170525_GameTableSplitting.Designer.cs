// <auto-generated />
using System;
using C_Sharp_SQL_HW4.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace C_Sharp_SQL_HW4.Database.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250216170525_GameTableSplitting")]
    partial class GameTableSplitting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("C_Sharp_SQL_HW4.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities", t =>
                        {
                            t.HasCheckConstraint("CK_City_Name", "LEN(Name) > 0");
                        });
                });

            modelBuilder.Entity("C_Sharp_SQL_HW4.Domain.Entities.CityStudio", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.HasKey("CityId", "StudioId");

                    b.HasIndex("StudioId");

                    b.ToTable("CitiesStudios");
                });

            modelBuilder.Entity("C_Sharp_SQL_HW4.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries", t =>
                        {
                            t.HasCheckConstraint("CK_Country_Name", "LEN(Name) > 0");
                        });
                });

            modelBuilder.Entity("C_Sharp_SQL_HW4.Domain.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSingle")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("SoldCopies")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StudioId");

                    b.ToTable("Games", t =>
                        {
                            t.HasCheckConstraint("CK_Game_Name", "LEN(Name) > 0");

                            t.HasCheckConstraint("CK_Game_SoldCopies", "SoldCopies >= 0");
                        });
                });

            modelBuilder.Entity("C_Sharp_SQL_HW4.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres", t =>
                        {
                            t.HasCheckConstraint("CK_Genre_Name", "LEN(Name) > 0");
                        });
                });

            modelBuilder.Entity("C_Sharp_SQL_HW4.Domain.Entities.Studio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Studios", t =>
                        {
                            t.HasCheckConstraint("CK_Studio_Name", "LEN(Name) > 0");
                        });
                });

            modelBuilder.Entity("C_Sharp_SQL_HW4.Domain.Entities.City", b =>
                {
                    b.HasOne("C_Sharp_SQL_HW4.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("C_Sharp_SQL_HW4.Domain.Entities.CityStudio", b =>
                {
                    b.HasOne("C_Sharp_SQL_HW4.Domain.Entities.City", "City")
                        .WithMany("CitiesStudios")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C_Sharp_SQL_HW4.Domain.Entities.Studio", "Studio")
                        .WithMany("CitiesStudios")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("C_Sharp_SQL_HW4.Domain.Entities.Game", b =>
                {
                    b.HasOne("C_Sharp_SQL_HW4.Domain.Entities.Genre", "Genre")
                        .WithMany("Games")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C_Sharp_SQL_HW4.Domain.Entities.Studio", "Studio")
                        .WithMany("Games")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("C_Sharp_SQL_HW4.Domain.Entities.City", b =>
                {
                    b.Navigation("CitiesStudios");
                });

            modelBuilder.Entity("C_Sharp_SQL_HW4.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("C_Sharp_SQL_HW4.Domain.Entities.Genre", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("C_Sharp_SQL_HW4.Domain.Entities.Studio", b =>
                {
                    b.Navigation("CitiesStudios");

                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
